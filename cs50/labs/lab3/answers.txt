sort1 uses: bubble sort

How do you know?: Sort 1,2 ,3 were run on all provided .txt files. Running sort on reversed and sorted files would represent the worst and best case scenarios. Upon observing the real times generated, it was found that sort1 generates time that is in between those that were generated by sort2 and sort3. It was also observed that the best case time and the worst case times differed by a big margin. These are characteristics of Bubble sort when compared among bubble, selection and merge sort. Thus sort1 is bubble sort.

sort2 uses: merge sort

How do you know?: Sort 1,2 ,3 were run on all provided .txt files. Running sort on reversed and sorted files would represent the worst and best case scenarios. Upon observing the real times generated, it was found that sort2 generates time that is the least among those that were generated by sort1, sort2 and sort3. It was also observed that the best case time and the worst case times did not differ by a big margin. These are characteristics of Merge sort when compared among bubble, selection and merge sort. Thus sort2 is merge sort.

sort3 uses: selection sort

How do you know?: Sort 1,2 ,3 were run on all provided .txt files. Running sort on reversed and sorted files would represent the worst and best case scenarios. Upon observing the real times generated, it was found that sort3 generates time that is similar to those generated by sort1/ bubble sort in the worst case. It was also observed that the best case time and the worst case times did not differ by a big margin. These are characteristics of selection sort when compared among bubble, selection and merge sort. Thus sort3 is selection sort.
