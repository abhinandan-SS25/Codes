
/**
 * This class models a Badger object in the P03 Dancing Badgers programming assignment
 *
 */
public class Badger extends MovingThing implements Clickable {


  private DanceStep[] danceSteps; //array storing this Badger's dance show steps
      private boolean isDancing; //indicates whether this badger is dancing or not
      private boolean isDragging; //indicates whether this badger is being dragged or not
      private float[] nextDancePosition; //stores the next dance (x, y) position of this Badger.
      private static int oldMouseX; //old x-position of the mouse
      private static int oldMouseY; //old y-position of the mouse
      private int stepIndex; //index position of the current dance step of this badger
  

      public Badger(float x, float y, DanceStep[] danceSteps) {
        super(x, y, 2, "badger.png");
        this.isDancing = false;
        this.isDragging = false;
        this.danceSteps = danceSteps;
        this.stepIndex = 1;
      }

  /**
   * Draws this badger to the display window. It sets also its position to the mouse position if
   * this badger is being dragged (i.e. if its isDragging field is set to true).
   */
  @Override
  public void draw() {
    // if the badger is dragging, set its position to the mouse position
    if (this.isDragging) {
      drag();
    }
    if (this.isDancing) {
      dance();
    }
    super.draw();

  }

  /**
   * Checks whether this badger is being dragged
   * 
   * @return true if the badger is being dragged, false otherwise
   */
  public boolean isDragging() {
    return isDragging;
  }

  
  /**
   * Helper method to drag this Badger object to follow the mouse moves
   * 
   */
  private void drag() {
    int dx = processing.mouseX - oldMouseX;
    int dy = processing.mouseY - oldMouseY;
    x+=dx;
    y+=dy;
    
    if(x > 0)
      x = Math.min(x, processing.width);
    else
      x = 0;
    if(y > 0)
     y = Math.min(y, processing.height);
    else
      y = 0;
    oldMouseX = processing.mouseX;
    oldMouseY = processing.mouseY;
  }
  
  /**
   * Starts dragging this badger
   * 
   */
  public void startDragging() {
    oldMouseX = processing.mouseX;
    oldMouseY = processing.mouseY;
    this.isDragging = true;
    drag();
  }
  
  /**
   * Stops dragging this Badger object
   * 
   */
  public void stopDragging() {
    this.isDragging = false;
  }
  
  public void mousePressed() {
    if (isMouseOver() && !isDancing) {
      this.startDragging();
    }
  }
  
  public void mouseReleased() {
    this.stopDragging();
  }
  
  private boolean makeMoveDance() {
    float dx = nextDancePosition[0] - this.x; // x-move towards destination
    float dy = nextDancePosition[1] - this.y; // y-move towards destination
    int d = (int) Math.sqrt(dx * dx + dy * dy); // distance to destination
    if (d != 0) { // move!
      this.x += speed * dx / d;
      this.y += speed * dy / d;
      if (d < 0) {
        isFacingRight = false;
      }
      else {
        isFacingRight = true;
      }
    }
    if (d < 2 * speed) {
      return true;
    }
    else {
      return false;
    }
  }
  
  private void dance() {
    if (this.makeMoveDance()) {
      nextDancePosition = danceSteps[stepIndex].getPositionAfter(this.x, this.y);
      stepIndex = (stepIndex + 1) % danceSteps.length;
    }
  }
  
  public void startDancing() {
    this.isDancing = true;
    this.stopDragging();
    this.stepIndex = 0;
    this.nextDancePosition = this.danceSteps[0].getPositionAfter(this.x, this.y);
  }
  
  public void stopDancing() {
    this.isDancing = false;
  }
}
